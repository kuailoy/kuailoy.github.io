(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{627:function(t,s,a){"use strict";a.r(s);var n=a(9),v=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("先来看一张图，下图展示了 JavaScript 浏览器环境的简单模型（Node 环境暂时不做讨论）")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2020/png/1253531/1589264074927-634bf5c9-80e5-4d16-be0c-26ae248f9710.png#align=left&display=inline&height=597&margin=%5Bobject%20Object%5D&name=1_DoeEbDsjPncF282Xjh_yjw.png&originHeight=872&originWidth=1090&size=276406&status=done&style=none&width=74#align=left&display=inline&height=872&margin=%5Bobject%20Object%5D&originHeight=872&originWidth=1090&status=done&style=none&width=1090",alt:"1_DoeEbDsjPncF282Xjh_yjw.png"}})]),t._v(" "),a("p",[t._v("如上图所示，浏览器环境主要包括这几个部分：")]),t._v(" "),a("ul",[a("li",[t._v("JS 引擎（JS Engine ）")]),t._v(" "),a("li",[t._v("WEB API")]),t._v(" "),a("li",[t._v("事件循环 (Event Loop)")]),t._v(" "),a("li",[t._v("任务队列(Callback Queue)")])]),t._v(" "),a("p",[t._v("这几个玩意儿都是干嘛的呢，它们之间又有啥关系？我们可以结合这张图来一一讨论")]),t._v(" "),a("h2",{attrs:{id:"一、javascript-引擎-js-engine"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、javascript-引擎-js-engine"}},[t._v("#")]),t._v(" 一、JavaScript 引擎（JS Engine）")]),t._v(" "),a("p",[t._v("首先，要区分 **JS 引擎（JS Engine）**和 "),a("strong",[t._v("JS 运行时环境（JS Runtime Environment）")]),t._v(" 这两个概念，它们实际上是两个维度的东西")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("JS 运行时环境")]),t._v("是 JS 代码运行时的"),a("strong",[t._v("宿主环境")]),t._v("，包括了上图的框框里所有的内容，通俗点说，就是 JS 代码在哪执行，是浏览器、还是 Node")]),t._v(" "),a("li",[a("strong",[t._v("运行时环境")]),t._v("会提供一个"),a("strong",[t._v("JS 引擎")]),t._v("，我们的 JavaScript 代码就是由这个引擎来执行和编译的，例如 Chrome 的 V8，Mozilla 的 Spidermonkey, Safari 的 nitro 等（IE ：？），它们都是按照 ECMAScript 规范实现的，从使用 JS 语言的层面上来说，它们是没有区别的（当然，实现上肯定区别）")]),t._v(" "),a("li",[a("strong",[t._v("JS 引擎")]),t._v("只是"),a("strong",[t._v("运行时环境")]),t._v("中的一个部分，"),a("strong",[t._v("运行时环境")]),t._v("还会提供一些 ECMAScript 标准之外的特性，例如"),a("strong",[t._v("WEB API")]),t._v("等")])]),t._v(" "),a("h2",{attrs:{id:"二、web-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、web-api"}},[t._v("#")]),t._v(" 二、WEB API")]),t._v(" "),a("p",[a("strong",[t._v("WEB API")]),t._v(" 就很好理解了，接触过前端的都知道，浏览器会提供事件捕获、定时器、Http 请求等 API，这些 API 不属于 EcmaScript 的语言标准，当然也就独立于"),a("strong",[t._v("JS 引擎")]),t._v("之外")]),t._v(" "),a("h2",{attrs:{id:"三、任务队列-callback-queue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、任务队列-callback-queue"}},[t._v("#")]),t._v(" 三、任务队列（Callback Queue）")]),t._v(" "),a("ol",[a("li",[t._v("我们调用 "),a("strong",[t._v("Web API "),a("strong",[t._v("产生的一些异步任务，它们的 CallBack 会被丢进")]),t._v("任务队列")]),t._v("里排队等着，所以叫 "),a("strong",[t._v("Callback Queue")])]),t._v(" "),a("li",[a("strong",[t._v("任务队列")]),t._v("属于队列（Queue Data Structure）这种数据结构，遵循先进先出的原则（FIFO - First in first out）")]),t._v(" "),a("li",[t._v("任务队列里的 Callback 什么时候执行呢，首先是异步的结果返回了，这个时间点不能确定，其次是主线程里的代码执行完了之后，会从队列里取出第一个 Callback 执行")])]),t._v(" "),a("p",[t._v("P.S. 队列就跟你排队买东西一样嘛，先来的先买，后来的后买，按顺序来不能乱了")]),t._v(" "),a("h2",{attrs:{id:"四、事件循环-event-loop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、事件循环-event-loop"}},[t._v("#")]),t._v(" 四、事件循环（Event Loop）")]),t._v(" "),a("ol",[a("li",[t._v("首先要明确的是，JavaScript 是单线程的，也即只有一个"),a("strong",[t._v("主线程，事件循环")]),t._v("是存在于"),a("strong",[t._v("主线程")]),t._v("之外的，是"),a("strong",[t._v("宿主环境")]),t._v("的一种机制，是更为底层的东西")]),t._v(" "),a("li",[a("strong",[t._v("主线程")]),t._v("可以简单的理解为上图中"),a("strong",[t._v("JS 引擎")]),t._v("中的**Call Stack，**JS 代码在主线程中同步地执行，遇到异步的任务，不等待异步结果返回，而是把它的 Callback 放入任务队列里，继续执行后面的同步代码（这里的异步任务是宏任务，通常是浏览器 API 产生的，后面会详细说明）")]),t._v(" "),a("li",[a("strong",[t._v("事件循环")]),t._v("像是一个监工的，一直在后面运行着，在主线程的同步代码执行完后，事件循环就会去检查任务队列，然后将队列中的第一个任务取出放入主线程中继续执行，直到所有任务执行完，它就继续等待新的任务")])]),t._v(" "),a("h3",{attrs:{id:"_4-1-javascript-中的同步与异步-阻塞与非阻塞"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-javascript-中的同步与异步-阻塞与非阻塞"}},[t._v("#")]),t._v(" 4.1 JavaScript 中的同步与异步，阻塞与非阻塞")]),t._v(" "),a("p",[t._v("结合事件循环，我是这么理解这几个概念的：")]),t._v(" "),a("p",[a("strong",[t._v("同步")]),t._v("，是指主线程按顺序执行代码，一段代码执行完成并返回结果后，再执行下一句\n如果一段代码的执行需要非常长的时间，比如一个很大的 for 循环，主线程也要一直干等着它执行完，才会执行下一句，这就造成了"),a("strong",[t._v("阻塞")])]),t._v(" "),a("p",[a("strong",[t._v("异步")]),t._v("，是主线程执行到异步任务时，不再等待它完成，而是将其暂时"),a("strong",[t._v("挂起")]),t._v("（pending），接着执行后面的代码，这个过程中主线程一直没闲着，即"),a("strong",[t._v("非阻塞")])]),t._v(" "),a("p",[t._v("它们之间的关系，可以简单理解为，"),a("strong",[t._v("同步")]),t._v("可能造成"),a("strong",[t._v("阻塞")]),t._v("，而"),a("strong",[t._v("异步")]),t._v("的作用是"),a("strong",[t._v("非阻塞")])]),t._v(" "),a("h3",{attrs:{id:"_4-2-宏任务-macrotask-与微任务-microtask"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-宏任务-macrotask-与微任务-microtask"}},[t._v("#")]),t._v(" 4.2 宏任务(macrotask)与微任务(microtask)")]),t._v(" "),a("p",[t._v("在 JavaScript 引入了 Promise 等概念之后，异步代码又可以区分为"),a("strong",[t._v("宏任务")]),t._v("和"),a("strong",[t._v("微任务")]),t._v("，同样是异步，它们之间有什么区别呢？")]),t._v(" "),a("p",[t._v("下列操作会在任务队列中，分别添加宏任务和微任务")]),t._v(" "),a("h4",{attrs:{id:"产生宏任务的操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#产生宏任务的操作"}},[t._v("#")]),t._v(" 产生宏任务的操作")]),t._v(" "),a("ul",[a("li",[t._v("setTimeout")]),t._v(" "),a("li",[t._v("setInterval")]),t._v(" "),a("li",[t._v("I/O")]),t._v(" "),a("li",[t._v("requestAnimationFrame")]),t._v(" "),a("li",[t._v("setImmediate")]),t._v(" "),a("li",[t._v("UI rendering")])]),t._v(" "),a("h4",{attrs:{id:"产生微任务的操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#产生微任务的操作"}},[t._v("#")]),t._v(" 产生微任务的操作")]),t._v(" "),a("ul",[a("li",[t._v("process.nextTick(Node)")]),t._v(" "),a("li",[t._v("Promise")]),t._v(" "),a("li",[t._v("Object.observe")]),t._v(" "),a("li",[t._v("MutationObserver")])]),t._v(" "),a("p",[t._v("假设当前"),a("strong",[t._v("主线程")]),t._v("的执行栈中，正在执行一个任务（宏任务），当遇到 Promise 等产生"),a("strong",[t._v("微任务")]),t._v("的操作，就会在当前"),a("strong",[t._v("宏任务")]),t._v("中添加一个"),a("strong",[t._v("微任务")]),t._v("，并放入执行栈的微任务队列中，在执行完同步代码后，优先执行当前宏任务的微任务")]),t._v(" "),a("p",[t._v("一个"),a("strong",[t._v("宏任务")]),t._v("可以包含多个微任务，当前"),a("strong",[t._v("宏任务")]),t._v("中的所有"),a("strong",[t._v("微任务")]),t._v("都执行完后，才会执行下一个"),a("strong",[t._v("宏任务")])]),t._v(" "),a("p",[t._v("需要说明的是，宏任务队列和微任务队列是"),a("strong",[t._v("两个不同的队列")]),t._v("，宏任务队列在运行时环境中，就是上面说的"),a("strong",[t._v("任务队列（Callback Queue）")]),t._v("，而微任务队列则存在于当前的执行栈（Call Stack）中，从属于当前的宏任务")]),t._v(" "),a("p",[t._v("下图描述了包含多个宏任务和微任务的事件循环的过程\n来看一个简单的例子：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("val")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("要点： "),a("code",[t._v("setTimeout")]),t._v("  产生一个宏任务， "),a("code",[t._v("Promise")]),t._v("  产生一个微任务\n执行顺序：同步代码 -> Promise 回调 -> setTimeout 回调")]),t._v(" "),a("p",[t._v("因此执行结果为：2 3 1")]),t._v(" "),a("p",[t._v("包含 "),a("code",[t._v("setTimeout")]),t._v("和 "),a("code",[t._v("Promise")]),t._v("，网上有很多复杂的例子，用同样的方法分析即可")]),t._v(" "),a("p",[t._v("这部分内容比较偏重理解，笔者只是用自己的话进行了简单描述，如有谬误还请指正")])])}),[],!1,null,null,null);s.default=v.exports}}]);