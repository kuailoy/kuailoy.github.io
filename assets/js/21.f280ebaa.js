(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{607:function(a,e,t){"use strict";t.r(e);var s=t(9),n=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"kubernetes介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes介绍"}},[a._v("#")]),a._v(" Kubernetes介绍")]),a._v(" "),t("ul",[t("li",[a._v("产生 - 从单体应用到微服务 - 组件快速迭代 - 组件的部署")]),a._v(" "),t("li",[a._v("需求 - 自动化调度、配置、监管和故障处理")]),a._v(" "),t("li",[a._v("作用 - kubernetes为每个组件选择合适的服务器，并保证组件通信")]),a._v(" "),t("li",[a._v("现状 - 越来越多的大公司把kubernetes作为运行应用的最佳平台，标准化了云端部署和内部部署的应用交付方式")])]),a._v(" "),t("h3",{attrs:{id:"kubernetes系统的需求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes系统的需求"}},[a._v("#")]),a._v(" kubernetes系统的需求")]),a._v(" "),t("ul",[t("li",[a._v("从单体应用到微服务：微服务的扩容、部署和环境差异")]),a._v(" "),t("li",[a._v("为应用程序提供一致的环境：不同生产机器的环境、生产环境和开发环境")]),a._v(" "),t("li",[a._v("持续交付：DevOps和无运维 - 让同一团队参与应用的开发、部署、运维的整个生命周期，开发者、QA和运维团队彼此之间的合作需要贯穿整个流程")]),a._v(" "),t("li",[a._v("NoOps：开发者部署应用本身，无需关心基础设施，无需与运维团队交涉，而运维团队不需要处理应用程序的独特性")])]),a._v(" "),t("p",[a._v("kubernetes能够实现上述内容，它通过对实际硬件做抽象，将自身暴露成一个平台，允许开发者自己部署应用程序，让系统管理员聚焦于底层基础设施")]),a._v(" "),t("h2",{attrs:{id:"核心概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#核心概念"}},[a._v("#")]),a._v(" 核心概念")]),a._v(" "),t("ul",[t("li",[a._v("Pod\n"),t("ul",[t("li",[a._v("最小部署单元")]),a._v(" "),t("li",[a._v("一组容器的集合")]),a._v(" "),t("li",[a._v("容器共享网络")]),a._v(" "),t("li",[a._v("生命周期是短暂的")])])]),a._v(" "),t("li",[a._v("Controller\n"),t("ul",[t("li",[a._v("确保预期的pod副本的数量")]),a._v(" "),t("li",[a._v("无状态/有状态应用部署")]),a._v(" "),t("li",[a._v("确保所有的node运行同一个pod")]),a._v(" "),t("li",[a._v("一次性任务和定时任务")])])]),a._v(" "),t("li",[a._v("Service\n"),t("ul",[t("li",[a._v("定义一组pod的访问规则")])])]),a._v(" "),t("li",[a._v("存储")]),a._v(" "),t("li",[a._v("调度器Ingress")]),a._v(" "),t("li",[a._v("安全机制RBAC")]),a._v(" "),t("li",[a._v("包管理工具Helm")])]),a._v(" "),t("h2",{attrs:{id:"k8s集群架构组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#k8s集群架构组件"}},[a._v("#")]),a._v(" k8s集群架构组件")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/1253531/1620351956729-0ab20a65-f3a9-4868-ae08-d163c1ef2a7b.png#clientId=ua963b0ed-4221-4&from=paste&height=286&id=uecc676f5&margin=%5Bobject%20Object%5D&name=image.png&originHeight=286&originWidth=748&originalType=binary&size=196957&status=done&style=none&taskId=ub726b603-6312-49fe-9605-c1c0d41a59f&width=748",alt:"image.png"}})]),a._v(" "),t("ul",[t("li",[a._v("Master Node（主控节点）\n"),t("ul",[t("li",[a._v("API server: 集群统一入口，通过UI或CLI与集群进行交互，以RESTful方式，交给etcd存储")]),a._v(" "),t("li",[a._v("scheduler: 节点调度，选择容器运行的node节点")]),a._v(" "),t("li",[a._v("controller-manager: 处理集群中常规后台任务，一个资源对应一个控制器")]),a._v(" "),t("li",[a._v("etcd: 存储系统，用于保存集群相关的状态和配置")])])]),a._v(" "),t("li",[a._v("node （工作节点）\n"),t("ul",[t("li",[a._v("docker：容器技术")]),a._v(" "),t("li",[a._v("pod: 容器调用的最小单位, 容器的集合")]),a._v(" "),t("li",[a._v("kubelet: master派到node节点的代表，管理本机容器")]),a._v(" "),t("li",[a._v("kube-proxy: 提供网络代理，负载均衡等操作")]),a._v(" "),t("li",[a._v("fluentd: 日志的采集和查询")])])])]),a._v(" "),t("h2",{attrs:{id:"环境搭建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#环境搭建"}},[a._v("#")]),a._v(" 环境搭建")]),a._v(" "),t("h3",{attrs:{id:"工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工具"}},[a._v("#")]),a._v(" 工具")]),a._v(" "),t("p",[a._v("minikube (单节点）\nkubeadm（集群）\nkops （云端搭建）\nTectonic\nplay with kubenetes\n使用Google Kubernetes Engine托管Kubernetes 集群")]),a._v(" "),t("h3",{attrs:{id:"minikube-环境搭建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#minikube-环境搭建"}},[a._v("#")]),a._v(" Minikube 环境搭建")]),a._v(" "),t("p",[a._v("安装kubectl\n安装minikube\n安装virtual box")]),a._v(" "),t("h3",{attrs:{id:"单节点集群"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单节点集群"}},[a._v("#")]),a._v(" 单节点集群")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 启动minikube")]),a._v("\n$ minikube start\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查看状态")]),a._v("\n$ minikube status\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 进入虚拟机")]),a._v("\n$ minikube "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ssh")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 集群相关信息")]),a._v("\n$ kubectl config view\n$ kubectl config get-contexts\n$ kubectl cluster-info  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 当前集群信息")]),a._v("\n")])])]),t("h3",{attrs:{id:""}},[t("a",{staticClass:"header-anchor",attrs:{href:"#"}},[a._v("#")])]),a._v(" "),t("h2",{attrs:{id:"pod"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pod"}},[a._v("#")]),a._v(" pod")]),a._v(" "),t("ul",[t("li",[a._v("pod是一组并置的容器，代表kubernetes中的基本构建模块")]),a._v(" "),t("li",[a._v("同一个pod中的容器运行于相同的Network命名空间、相同的loopback网络接口，可以通过localhost通信")]),a._v(" "),t("li",[a._v("集群中的所有pod都在同一个共享网络地址空间中，可以通过ip地址相互访问")]),a._v(" "),t("li",[a._v("容器不应该包含多个进程，pod也不应该包含多个不需要运行在同一主机上的容器")])]),a._v(" "),t("p",[a._v("​")]),a._v(" "),t("p",[a._v("查看已部署pod的完整YAML")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ kubectl get po "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("pod名称"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" -o yaml\n")])])]),t("p",[a._v("完整的YAML信息")]),a._v(" "),t("ul",[t("li",[a._v("apiVersion: v1  YAML描述文件所使用的kubernetes API版本")]),a._v(" "),t("li",[a._v("kind：pod  Kubernetes对象/资源类型")]),a._v(" "),t("li",[a._v("metadata  pod元数据（名称、标签和注解等）")]),a._v(" "),t("li",[a._v("spec  pod规格/内容（pod的容器列表、volume等）")]),a._v(" "),t("li",[a._v("status  pod及其内部容器的详细状态")])]),a._v(" "),t("h3",{attrs:{id:"创建pod"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建pod"}},[a._v("#")]),a._v(" 创建pod")]),a._v(" "),t("p",[a._v("​")]),a._v(" "),t("p",[a._v("创建pod的YAML描述文件\n"),t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/1253531/1621835753224-5e3e0955-3074-4de0-8ab5-f33a44cf8983.png#clientId=u007d1473-228b-4&from=paste&height=361&id=u6c2f1638&margin=%5Bobject%20Object%5D&name=image.png&originHeight=361&originWidth=712&originalType=binary&size=92909&status=done&style=none&taskId=uc5e65be2-1bb9-4a83-a356-3f2ae8dd601&width=712",alt:"image.png"}})]),a._v(" "),t("p",[a._v("创建pod")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ kubectl create -f kubia-manual.yaml\n")])])]),t("p",[a._v("查看节点pod")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ kubectl get pods\n")])])]),t("p",[a._v("查看pod日志（容器日志）")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ kubectl logs kubia-manual\n$ kubectl logs kubia-manual -c "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("指定容器名称"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),t("h3",{attrs:{id:"-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[a._v("#")])]),a._v(" "),t("h3",{attrs:{id:"向pod发送请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#向pod发送请求"}},[a._v("#")]),a._v(" 向pod发送请求")]),a._v(" "),t("p",[a._v("创建service： 后文详述\n​")]),a._v(" "),t("p",[a._v("端口转发（出于调试等原因）")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 本地端口8888转发到我们的kubia-manual pod的端口8080")]),a._v("\n$ kubectl port-forward kubia-manual "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("8888")]),a._v(":8080\n")])])]),t("p",[a._v("通过端口转发发送请求的简化图\n"),t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/1253531/1621837855334-35965ab1-2403-4657-acb7-4bcb43945e05.png#clientId=u007d1473-228b-4&from=paste&height=199&id=uee0a9b00&margin=%5Bobject%20Object%5D&name=image.png&originHeight=199&originWidth=841&originalType=binary&size=99437&status=done&style=none&taskId=u7a835283-9012-4a01-9f1e-b42ca318eba&width=841",alt:"image.png"}})]),a._v(" "),t("h3",{attrs:{id:"标签-label"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标签-label"}},[a._v("#")]),a._v(" 标签 (label)")]),a._v(" "),t("p",[a._v("标签是可以附加到资源的任意键值对\n使用标签可以更好的组织pod和进行分类\n​")]),a._v(" "),t("p",[a._v("创建pod指定标签")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(".\nmetadata:\n  name: kubia-manual-v2\n  labels:\n    creation_method: manual\n    env: prod\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(".\n")])])]),t("p",[a._v("修改现有的pod标签")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 给pod添加标签")]),a._v("\n$ kubectl label po kubia-manual "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("creation_method")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("manual\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 修改现有标签，需要使用--overwrite选项")]),a._v("\n$ kubectl label po kubia-manual-v2 "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("env")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("debug --overwrite\n")])])]),t("p",[a._v("通过标签选择器列出pod")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 列出creation_method=manual的pod")]),a._v("\n$ kubectl get po -l "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("creation_method")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("manual\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 列出包含env标签的所有pod，无论其值如何")]),a._v("\n$ kubectl get po -l "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("env")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 列出没有env标签的pod")]),a._v("\n$ kubectl get po -l "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'!env'")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 其他(验证失败)")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# creation_method!=manual")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# env in (prod, devel)")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# env notin (prod, devel)")]),a._v("\n")])])]),t("h4",{attrs:{id:"通过标签选择器将pod调度到特定节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通过标签选择器将pod调度到特定节点"}},[a._v("#")]),a._v(" 通过标签选择器将pod调度到特定节点")]),a._v(" "),t("p",[a._v("给YAML文件增加nodeSelctor属性，如下")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("spec:\n  nodeSelector:\n    gpu: "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"true"')]),a._v("\n")])])]),t("p",[a._v("这样，创建pod时，调度器将只在包含标签gpu=true的节点中选择\n​")]),a._v(" "),t("p",[a._v("使用标签分类工作节点")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 给节点添加gpu=true标签")]),a._v("\n$ kubectl label node "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("nodeName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("gpu")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("true\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 列出只包含标签gpu=true的节点")]),a._v("\n$ kubectl get nodes -l "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("gpu")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("true\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 列出所有节点, 附加gpu标签值列")]),a._v("\n$ kubectl get nodes -L gpu\n")])])]),t("p",[a._v("将pod调度到特定节点")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ kubectl create -f kubia-gpu.yaml\n")])])]),t("p",[a._v("​")]),a._v(" "),t("h3",{attrs:{id:"注解-annotations"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注解-annotations"}},[a._v("#")]),a._v(" 注解 (annotations)")]),a._v(" "),t("p",[a._v("pod和其他对象还可以包含注解，注解也是键值对\n注解不能像标签一样用于对对象进行分组")]),a._v(" "),t("h4",{attrs:{id:"查看对象的注解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看对象的注解"}},[a._v("#")]),a._v(" 查看对象的注解")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ kubectl get po "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("podName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" -o yaml\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 或")]),a._v("\n$ kubectl describe "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("podName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),t("p",[a._v("添加和修改注解")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ kubectl annotate pod "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("podName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" mycompany.com/someannotation"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"foo bar"')]),a._v("\n")])])]),t("h3",{attrs:{id:"命名空间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命名空间"}},[a._v("#")]),a._v(" 命名空间")]),a._v(" "),t("p",[a._v("命名空间简单的为对象名称提供了一个作用域，不同的命名空间可以包含同名的资源")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 列出集群中所有命名空间")]),a._v("\n$ kubectl get ns\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查看指定命名空间的pod")]),a._v("\n$ kubectl get po --namespace kube-system\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#\t使用-n代替--namespace")]),a._v("\n$ kubectl get po -n kube-system\n")])])]),t("h4",{attrs:{id:"创建命名空间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建命名空间"}},[a._v("#")]),a._v(" 创建命名空间")]),a._v(" "),t("p",[a._v("从YAML文件创建命名空间：\n创建一个custom-namespace.yaml文件，如下\n"),t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/1253531/1621927345581-b9324aa2-31f4-439e-843e-cef94ecde9bd.png#clientId=u2f2dc01c-f0aa-4&from=paste&height=155&id=ubbb7bb4f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=155&originWidth=662&originalType=binary&size=33562&status=done&style=none&taskId=uefaa52d8-92d8-4d7c-b944-576b3413e84&width=662",alt:"image.png"}})]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ kubectl create -f custom-namespace.yaml\n")])])]),t("p",[a._v("使用kubectl create namespace命令创建")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ kubectl create namespace custom-namespace\n")])])]),t("h4",{attrs:{id:"管理其他命名空间中的对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#管理其他命名空间中的对象"}},[a._v("#")]),a._v(" 管理其他命名空间中的对象")]),a._v(" "),t("p",[a._v("在其他命名空间中创建资源")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ kubectl create -f kubia-manual.yaml -n custom-namespace\n")])])]),t("p",[a._v("当前上下文和当前上下文的命名空间可以通过kubectl config 命令进行更改\n可以设置下列别名：")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("alias")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("kcd")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'kubectl config set-context "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("kubectl config current-context"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v(" --namespace'")]),a._v("default\n")])])]),t("p",[a._v("然后，可以使用kcd some-namespace在命名空间之间进行切换\n​")]),a._v(" "),t("p",[a._v("命名空间是否隔离取决于kubernetes使用的网络解决方案\n​")]),a._v(" "),t("h3",{attrs:{id:"停止和删除pod"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#停止和删除pod"}},[a._v("#")]),a._v(" 停止和删除pod")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 按名称删除pod")]),a._v("\n$ kubectl delete po kubia-gpu\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 删除多个pod")]),a._v("\n$ kubectl delete po pod1 pod2\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 使用标签选择器删除pod")]),a._v("\n$ kubectl delete po -l "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("creation_method")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("manual\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 通过删除整个命名空间来删除pod")]),a._v("\n$ kubectl delete ns custom-namespace\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 删除命名空间中所有pod，但保留命名空间")]),a._v("\n$ kubectl delete po -all\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 删除命名空间中的所有资源")]),a._v("\n$ kubectl delete all -all\n")])])]),t("h3",{attrs:{id:"存活探针-liveness-probe"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#存活探针-liveness-probe"}},[a._v("#")]),a._v(" 存活探针（liveness probe）")]),a._v(" "),t("p",[a._v("Kubernetes可以通过存活探针检查容器是否还在运行，可以为pod中的每个容器单独指定存活探针，如果探测失败，kubernetes将定期执行探针并重新启动容器\n​")]),a._v(" "),t("p",[a._v("Kubernetes有以下三种探测容器的机制")]),a._v(" "),t("ul",[t("li",[a._v("HTTP GET 探针对容器的IP地址（你指定的端口和路径）执行HTTP GET请求")]),a._v(" "),t("li",[a._v("TCP套接字探针尝试与容器建立TCP链接，成功建立则探测成功")]),a._v(" "),t("li",[a._v("Exec探针在容器内执行任意命令，并检查命令的退出状态码是0则探测成功")])]),a._v(" "),t("h4",{attrs:{id:"-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#-3"}},[a._v("#")])]),a._v(" "),t("h4",{attrs:{id:"创建基于http的存活探针"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建基于http的存活探针"}},[a._v("#")]),a._v(" 创建基于HTTP的存活探针")]),a._v(" "),t("p",[a._v("YAML相关配置\n"),t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/1253531/1622105931372-87254d38-5366-48dd-a6fb-abffbab527b1.png#clientId=ue59f7bae-d427-4&from=paste&height=384&id=ucbb2905b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=384&originWidth=893&originalType=binary&size=75559&status=done&style=none&taskId=uf4d22c7d-014a-4335-9e74-5dcb938f81b&width=893",alt:"image.png"}})]),a._v(" "),t("p",[a._v("获取崩溃容器的日志")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 当前容器的日志")]),a._v("\n$ kubectl logs mypod\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 前一个容器的日志")]),a._v("\n$ kubectl logs mypod --previous\n")])])]),t("p",[a._v("通过查看kubectl describe可以了解容器重启原因\n​")]),a._v(" "),t("h4",{attrs:{id:"存活探针的附加配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#存活探针的附加配置"}},[a._v("#")]),a._v(" 存活探针的附加配置")]),a._v(" "),t("p",[a._v("存活探针可以增加附加配置，例如要设置初始延迟")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("livenessProbe:\n  httpGet:\n    path: /\n    port: "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("8080")]),a._v("\n  initialDelaySeconds: "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("15")]),a._v("\n")])])]),t("p",[a._v("如果不设置初始延迟，通常会导致探测失败，因为程序还没准备好\n​")]),a._v(" "),t("h4",{attrs:{id:"创建有效的存活探针"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建有效的存活探针"}},[a._v("#")]),a._v(" 创建有效的存活探针")]),a._v(" "),t("ul",[t("li",[a._v("给探针配置特定的URL路径，并让应用从内部对重要组件执行状态检查")]),a._v(" "),t("li",[a._v("保持探针轻量，不应消耗太多资源")]),a._v(" "),t("li",[a._v("无须在探针中实现重试循环，kubernetes会尝试若干次")]),a._v(" "),t("li",[a._v("存活探针失败时由节点的kubelet执行重启操作，如果节点本身崩溃，将无法执行任何操作")])]),a._v(" "),t("p",[a._v("​")]),a._v(" "),t("h2",{attrs:{id:"replicationcontroller"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#replicationcontroller"}},[a._v("#")]),a._v(" ReplicationController")]),a._v(" "),t("p",[a._v("节点故障时，ReplicationController管理的pod会被重新创建\nReplicationController的工作是确保pod数量始终与其标签选择器相匹配\n"),t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/1253531/1622191991804-dc0a6258-4099-4002-ac46-b7ad4d97d36e.png#clientId=ue59f7bae-d427-4&from=paste&height=482&id=uf5ebc59a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=482&originWidth=854&originalType=binary&size=123523&status=done&style=none&taskId=u712cf804-7140-425b-8f91-f3bbe762c13&width=854",alt:"image.png"}}),a._v("\nReplicationController的三部分")]),a._v(" "),t("ul",[t("li",[a._v("label selector (标签选择器)，用于确定ReplicationController作用域中有哪些pod")]),a._v(" "),t("li",[a._v("replica count (副本个数)，指定应运行的pod数量")]),a._v(" "),t("li",[a._v("pod template (pod模板)， 用于创建新的pod副本")])]),a._v(" "),t("p",[a._v("其中，只有更改副本个数，会影响现有的pod\n更改标签选择器和pod模板，会使现有pod脱离ReplicationController的范围\n​")]),a._v(" "),t("p",[a._v("使用RepicationController的好处")]),a._v(" "),t("ul",[t("li",[a._v("确保一个pod持续运行，方法是在现有pod丢失时启动一个新的pod")]),a._v(" "),t("li",[a._v("集群节点发生故障时，会给故障节点上运行的所有pod创建替代副本")]),a._v(" "),t("li",[a._v("能够轻松实现pod的水平伸缩")])]),a._v(" "),t("h3",{attrs:{id:"创建一个replicationcontroller"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建一个replicationcontroller"}},[a._v("#")]),a._v(" 创建一个ReplicationController")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/1253531/1622195915351-2e043e6b-a5b8-4a81-917b-ce3627d5ff28.png#clientId=ue59f7bae-d427-4&from=paste&height=458&id=u9f786fed&margin=%5Bobject%20Object%5D&name=image.png&originHeight=458&originWidth=821&originalType=binary&size=103644&status=done&style=none&taskId=u089ea7aa-6c36-49ab-87a5-092c02891b6&width=821",alt:"image.png"}})]),a._v(" "),t("p",[a._v("定义ReplicationContrller时不要指定pod选择器，让Kubernetes从pod模板中提取它，这样YAML更简短\n​")]),a._v(" "),t("p",[a._v("使用kubectl create命令")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("$ kubectl create -f kubai-rc.yaml\n")])])]),t("p",[a._v("之后可以查看pod，来看ReplicationController是否工作")])])}),[],!1,null,null,null);e.default=n.exports}}]);